[10,9,2,5,3,7,101,18]

Patience sort (actual solitaire game - https://www.youtube.com/watch?v=22s1xxRvy28 - the logic is a little different but it boils down to same conclusion):
------------------------

10
9
2 *

2 5

2 3 *

2 7
2 5 7
2 3 7 *

10 101
9 101
2 101
2 5 101
2 3 101
2 7 101
2 5 7 101
2 3 7 101 *

10 18
9 18
2 18

2 5 18

2 3 18

2 7 18
2 5 7 18
2 3 7 18 *

* Is always the best selection because we have a greater chance to create a greater subsequence

--------------------------
so the algorithm is kind of -

if(result.isEmpty() || result.last < arr[i])
  result.add(arr[i])
  continue;

indx = -result.binarysearch(arr[i]) - 1
result.set(arr[i], indx)

return result.size()

(binary search always returns the index where the element should have been placed,
so in  [3, 4, 7], if 6 is searched it will return -(insertion index) - 1, so it should have been 3,4,{6}, 7, so -2 - 1 = -3

Similarly if 8 was searched it would have return -3 - 1 = -4

to convert it into actually insertion index use formula -(insertionindex) - 1 = -(-4) - 1 = 4 - 1 = 3rd index as 4th element
)

---------------------------

lets re itertate using algorithm
[10,9,2,5,3,7,101,18]

take 10? - yes -> [10]
take 9? - no - replace for better chance? - yes - at -(-1) - 1 = 0 -> [9]
take 2? - no - replace for better chance? - yes - at 0 -> [2]
take 5? - yes -> [2, 5]
take 3? - no - replace for better chance? - yes - at 1 -> [2, 3] {Note: if there was a 4, next, 3 would have a better chance to construct longer subsequence than 5}
take 7? - yes -> [2, 3, 7]
take 101? - yes -> [2, 3, 7, 101]
take 18? - no -> replace for better chance? - yes - at 3 -> [2, 3, 7, 18]
END

Final best and longest subsequence (strictly increasing) -> result.size() = 4